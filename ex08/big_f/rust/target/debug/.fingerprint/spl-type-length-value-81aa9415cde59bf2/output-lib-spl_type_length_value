{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":2477,"byte_end":2563,"line_start":67,"line_end":67,"column_start":13,"column_end":99,"is_primary":false,"text":[{"text":"            pod_from_bytes::<Length>(&tlv_data[tlv_indices.length_start..tlv_indices.value_start])?;","highlight_start":13,"highlight_end":99}],"label":"this can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":1249,"byte_end":1281,"line_start":39,"line_end":39,"column_start":6,"column_end":38,"is_primary":false,"text":[{"text":") -> Result<TlvIndices, ProgramError> {","highlight_start":6,"highlight_end":38}],"label":"expected `solana_program::program_error::ProgramError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":2563,"byte_end":2564,"line_start":67,"line_end":67,"column_start":99,"column_end":100,"is_primary":true,"text":[{"text":"            pod_from_bytes::<Length>(&tlv_data[tlv_indices.length_start..tlv_indices.value_start])?;","highlight_start":99,"highlight_end":100}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<TlvIndices, solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":2563,"byte_end":2564,"line_start":67,"line_end":67,"column_start":99,"column_end":100,"is_primary":false,"text":[{"text":"            pod_from_bytes::<Length>(&tlv_data[tlv_indices.length_start..tlv_indices.value_start])?;","highlight_start":99,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<TlvIndices, solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:67:99\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<TlvIndices, ProgramError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `solana_program::program_error::ProgramError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pod_from_bytes::<Length>(&tlv_data[tlv_indices.length_start..tlv_indices.value_start])?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<TlvIndices, solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m             `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m             `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m             `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m             `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<TlvIndices, solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":4333,"byte_end":4450,"line_start":107,"line_end":109,"column_start":26,"column_end":14,"is_primary":false,"text":[{"text":"            let length = pod_from_bytes::<Length>(","highlight_start":26,"highlight_end":51},{"text":"                &tlv_data[tlv_indices.length_start..tlv_indices.value_start],","highlight_start":1,"highlight_end":78},{"text":"            )?;","highlight_start":1,"highlight_end":14}],"label":"this can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":2999,"byte_end":3053,"line_start":80,"line_end":80,"column_start":6,"column_end":60,"is_primary":false,"text":[{"text":") -> Result<(Vec<ArrayDiscriminator>, usize), ProgramError> {","highlight_start":6,"highlight_end":60}],"label":"expected `solana_program::program_error::ProgramError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":4450,"byte_end":4451,"line_start":109,"line_end":109,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"            )?;","highlight_start":14,"highlight_end":15}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(Vec<ArrayDiscriminator>, usize), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":4450,"byte_end":4451,"line_start":109,"line_end":109,"column_start":14,"column_end":15,"is_primary":false,"text":[{"text":"            )?;","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<(Vec<ArrayDiscriminator>, usize), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:109:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m) -> Result<(Vec<ArrayDiscriminator>, usize), ProgramError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `solana_program::program_error::ProgramError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            let length = pod_from_bytes::<Length>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m__________________________-\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                &tlv_data[tlv_indices.length_start..tlv_indices.value_start],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            )?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(Vec<ArrayDiscriminator>, usize), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<(Vec<ArrayDiscriminator>, usize), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":5361,"byte_end":5423,"line_start":141,"line_end":141,"column_start":18,"column_end":80,"is_primary":false,"text":[{"text":"    let length = pod_from_bytes::<Length>(&tlv_data[length_start..value_start])?;","highlight_start":18,"highlight_end":80}],"label":"this can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":4974,"byte_end":5001,"line_start":127,"line_end":127,"column_start":6,"column_end":33,"is_primary":false,"text":[{"text":") -> Result<&[u8], ProgramError> {","highlight_start":6,"highlight_end":33}],"label":"expected `solana_program::program_error::ProgramError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":5423,"byte_end":5424,"line_start":141,"line_end":141,"column_start":80,"column_end":81,"is_primary":true,"text":[{"text":"    let length = pod_from_bytes::<Length>(&tlv_data[length_start..value_start])?;","highlight_start":80,"highlight_end":81}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<&[u8], solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":5423,"byte_end":5424,"line_start":141,"line_end":141,"column_start":80,"column_end":81,"is_primary":false,"text":[{"text":"    let length = pod_from_bytes::<Length>(&tlv_data[length_start..value_start])?;","highlight_start":80,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<&[u8], solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:141:80\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<&[u8], ProgramError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `solana_program::program_error::ProgramError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let length = pod_from_bytes::<Length>(&tlv_data[length_start..value_start])?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<&[u8], solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<&[u8], solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":8389,"byte_end":8414,"line_start":216,"line_end":216,"column_start":9,"column_end":34,"is_primary":true,"text":[{"text":"        pod_from_bytes::<V>(data)","highlight_start":9,"highlight_end":34}],"label":"expected `solana_program::program_error::ProgramError`, found `ProgramError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":8282,"byte_end":8306,"line_start":214,"line_end":214,"column_start":10,"column_end":34,"is_primary":false,"text":[{"text":"    ) -> Result<&V, ProgramError> {","highlight_start":10,"highlight_end":34}],"label":"expected `Result<&V, solana_program::program_error::ProgramError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ProgramError` and `solana_program::program_error::ProgramError` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`ProgramError` is defined in crate `solana_program`","code":null,"level":"note","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-2.0.11/src/program_error.rs","byte_start":468,"byte_end":489,"line_start":15,"line_end":15,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub enum ProgramError {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`solana_program::program_error::ProgramError` is defined in crate `solana_program`","code":null,"level":"note","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-1.18.23/src/program_error.rs","byte_start":442,"byte_end":463,"line_start":14,"line_end":14,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub enum ProgramError {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `solana_program` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:216:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<&V, ProgramError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<&V, solana_program::program_error::ProgramError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let data = get_bytes::<V>(self.get_data(), repetition_number)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pod_from_bytes::<V>(data)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `solana_program::program_error::ProgramError`, found `ProgramError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `ProgramError` and `solana_program::program_error::ProgramError` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `ProgramError` is defined in crate `solana_program`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-2.0.11/src/program_error.rs:15:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ProgramError {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `solana_program::program_error::ProgramError` is defined in crate `solana_program`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-1.18.23/src/program_error.rs:14:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ProgramError {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `solana_program` are being used?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":12235,"byte_end":12264,"line_start":333,"line_end":333,"column_start":9,"column_end":38,"is_primary":true,"text":[{"text":"        pod_from_bytes_mut::<V>(data)","highlight_start":9,"highlight_end":38}],"label":"expected `solana_program::program_error::ProgramError`, found `ProgramError`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":12116,"byte_end":12144,"line_start":331,"line_end":331,"column_start":10,"column_end":38,"is_primary":false,"text":[{"text":"    ) -> Result<&mut V, ProgramError> {","highlight_start":10,"highlight_end":38}],"label":"expected `Result<&mut V, solana_program::program_error::ProgramError>` because of return type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`ProgramError` and `solana_program::program_error::ProgramError` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`ProgramError` is defined in crate `solana_program`","code":null,"level":"note","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-2.0.11/src/program_error.rs","byte_start":468,"byte_end":489,"line_start":15,"line_end":15,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub enum ProgramError {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`solana_program::program_error::ProgramError` is defined in crate `solana_program`","code":null,"level":"note","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-1.18.23/src/program_error.rs","byte_start":442,"byte_end":463,"line_start":14,"line_end":14,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"pub enum ProgramError {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `solana_program` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:333:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m331\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<&mut V, ProgramError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `Result<&mut V, solana_program::program_error::ProgramError>` because of return type\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let data = self.get_bytes_with_repetition_mut::<V>(repetition_number)?;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pod_from_bytes_mut::<V>(data)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `solana_program::program_error::ProgramError`, found `ProgramError`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `ProgramError` and `solana_program::program_error::ProgramError` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `ProgramError` is defined in crate `solana_program`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-2.0.11/src/program_error.rs:15:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ProgramError {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `solana_program::program_error::ProgramError` is defined in crate `solana_program`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/solana-program-1.18.23/src/program_error.rs:14:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum ProgramError {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `solana_program` are being used?\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":13206,"byte_end":13207,"line_start":362,"line_end":362,"column_start":85,"column_end":86,"is_primary":true,"text":[{"text":"        let length = pod_from_bytes::<Length>(&self.data[length_start..value_start])?;","highlight_start":85,"highlight_end":86}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<&mut [u8], solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":13206,"byte_end":13207,"line_start":362,"line_end":362,"column_start":85,"column_end":86,"is_primary":false,"text":[{"text":"        let length = pod_from_bytes::<Length>(&self.data[length_start..value_start])?;","highlight_start":85,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<&mut [u8], solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:362:85\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let length = pod_from_bytes::<Length>(&self.data[length_start..value_start])?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<&mut [u8], solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<&mut [u8], solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":14345,"byte_end":14346,"line_start":387,"line_end":387,"column_start":60,"column_end":61,"is_primary":true,"text":[{"text":"        let extension_ref = pod_from_bytes_mut::<V>(buffer)?;","highlight_start":60,"highlight_end":61}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(&mut V, usize), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":14345,"byte_end":14346,"line_start":387,"line_end":387,"column_start":60,"column_end":61,"is_primary":false,"text":[{"text":"        let extension_ref = pod_from_bytes_mut::<V>(buffer)?;","highlight_start":60,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<(&mut V, usize), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:387:60\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let extension_ref = pod_from_bytes_mut::<V>(buffer)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(&mut V, usize), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<(&mut V, usize), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":16399,"byte_end":16400,"line_start":439,"line_end":439,"column_start":88,"column_end":89,"is_primary":true,"text":[{"text":"                pod_from_bytes_mut::<Length>(&mut self.data[length_start..value_start])?;","highlight_start":88,"highlight_end":89}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(&mut [u8], usize), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":16399,"byte_end":16400,"line_start":439,"line_end":439,"column_start":88,"column_end":89,"is_primary":false,"text":[{"text":"                pod_from_bytes_mut::<Length>(&mut self.data[length_start..value_start])?;","highlight_start":88,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<(&mut [u8], usize), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:439:88\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                pod_from_bytes_mut::<Length>(&mut self.data[length_start..value_start])?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(&mut [u8], usize), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<(&mut [u8], usize), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":18306,"byte_end":18307,"line_start":490,"line_end":490,"column_start":97,"column_end":98,"is_primary":true,"text":[{"text":"        let length_ref = pod_from_bytes_mut::<Length>(&mut self.data[length_start..value_start])?;","highlight_start":97,"highlight_end":98}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<&mut [u8], solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":18306,"byte_end":18307,"line_start":490,"line_end":490,"column_start":97,"column_end":98,"is_primary":false,"text":[{"text":"        let length_ref = pod_from_bytes_mut::<Length>(&mut self.data[length_start..value_start])?;","highlight_start":97,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<&mut [u8], solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:490:97\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let length_ref = pod_from_bytes_mut::<Length>(&mut self.data[length_start..value_start])?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<&mut [u8], solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<&mut [u8], solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`?` couldn't convert the error to `solana_program::program_error::ProgramError`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":20787,"byte_end":20845,"line_start":556,"line_end":556,"column_start":26,"column_end":84,"is_primary":false,"text":[{"text":"        usize::try_from(*pod_from_bytes::<Length>(&data[length_start..value_start])?)?","highlight_start":26,"highlight_end":84}],"label":"this can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":20425,"byte_end":20449,"line_start":547,"line_end":547,"column_start":6,"column_end":30,"is_primary":false,"text":[{"text":") -> Result<(), ProgramError> {","highlight_start":6,"highlight_end":30}],"label":"expected `solana_program::program_error::ProgramError` because of this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":20845,"byte_end":20846,"line_start":556,"line_end":556,"column_start":84,"column_end":85,"is_primary":true,"text":[{"text":"        usize::try_from(*pod_from_bytes::<Length>(&data[length_start..value_start])?)?","highlight_start":84,"highlight_end":85}],"label":"the trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs","byte_start":20845,"byte_end":20846,"line_start":556,"line_end":556,"column_start":84,"column_end":85,"is_primary":false,"text":[{"text":"        usize::try_from(*pod_from_bytes::<Length>(&data[length_start..value_start])?)?","highlight_start":84,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `From<T>`:\n  `solana_program::program_error::ProgramError` implements `From<TlvError>`\n  `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\n  `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\n  `solana_program::program_error::ProgramError` implements `From<u64>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Result<(), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `?` couldn't convert the error to `solana_program::program_error::ProgramError`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/weeaa/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-type-length-value-0.4.5/src/state.rs:556:84\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m547\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m) -> Result<(), ProgramError> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mexpected `solana_program::program_error::ProgramError` because of this\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        usize::try_from(*pod_from_bytes::<Length>(&data[length_start..value_start])?)?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `From<spl_pod::solana_program::program_error::ProgramError>` is not implemented for `solana_program::program_error::ProgramError`, which is required by `Result<(), solana_program::program_error::ProgramError>: FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis can't be annotated with `?` because it has type `Result<_, spl_pod::solana_program::program_error::ProgramError>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `From<T>`:\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<TlvError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<solana_program::pubkey::PubkeyError>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<std::io::Error>`\u001b[0m\n\u001b[0m              `solana_program::program_error::ProgramError` implements `From<u64>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Result<(), solana_program::program_error::ProgramError>` to implement `FromResidual<Result<Infallible, spl_pod::solana_program::program_error::ProgramError>>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 10 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
