// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bubblegum

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type TreeConfig struct {
	TreeCreator       ag_solanago.PublicKey
	TreeDelegate      ag_solanago.PublicKey
	TotalMintCapacity uint64
	NumMinted         uint64
	IsPublic          bool
	IsDecompressible  DecompressibleState
}

var TreeConfigDiscriminator = [8]byte{122, 245, 175, 248, 171, 34, 0, 207}

func (obj TreeConfig) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TreeConfigDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `TreeCreator` param:
	err = encoder.Encode(obj.TreeCreator)
	if err != nil {
		return err
	}
	// Serialize `TreeDelegate` param:
	err = encoder.Encode(obj.TreeDelegate)
	if err != nil {
		return err
	}
	// Serialize `TotalMintCapacity` param:
	err = encoder.Encode(obj.TotalMintCapacity)
	if err != nil {
		return err
	}
	// Serialize `NumMinted` param:
	err = encoder.Encode(obj.NumMinted)
	if err != nil {
		return err
	}
	// Serialize `IsPublic` param:
	err = encoder.Encode(obj.IsPublic)
	if err != nil {
		return err
	}
	// Serialize `IsDecompressible` param:
	err = encoder.Encode(obj.IsDecompressible)
	if err != nil {
		return err
	}
	return nil
}

func (obj *TreeConfig) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TreeConfigDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[122 245 175 248 171 34 0 207]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `TreeCreator`:
	err = decoder.Decode(&obj.TreeCreator)
	if err != nil {
		return err
	}
	// Deserialize `TreeDelegate`:
	err = decoder.Decode(&obj.TreeDelegate)
	if err != nil {
		return err
	}
	// Deserialize `TotalMintCapacity`:
	err = decoder.Decode(&obj.TotalMintCapacity)
	if err != nil {
		return err
	}
	// Deserialize `NumMinted`:
	err = decoder.Decode(&obj.NumMinted)
	if err != nil {
		return err
	}
	// Deserialize `IsPublic`:
	err = decoder.Decode(&obj.IsPublic)
	if err != nil {
		return err
	}
	// Deserialize `IsDecompressible`:
	err = decoder.Decode(&obj.IsDecompressible)
	if err != nil {
		return err
	}
	return nil
}

type Voucher struct {
	LeafSchema LeafSchema
	Index      uint32
	MerkleTree ag_solanago.PublicKey
}

var VoucherDiscriminator = [8]byte{191, 204, 149, 234, 213, 165, 13, 65}

func (obj Voucher) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(VoucherDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `LeafSchema` param:
	{
		tmp := leafSchemaContainer{}
		switch realvalue := obj.LeafSchema.(type) {
		case *LeafSchemaV1:
			tmp.Enum = 0
			tmp.V1 = *realvalue
		}
		err := encoder.Encode(tmp)
		if err != nil {
			return err
		}
	}
	// Serialize `Index` param:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return err
	}
	// Serialize `MerkleTree` param:
	err = encoder.Encode(obj.MerkleTree)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Voucher) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(VoucherDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[191 204 149 234 213 165 13 65]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `LeafSchema`:
	{
		tmp := new(leafSchemaContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return err
		}
		switch tmp.Enum {
		case 0:
			obj.LeafSchema = &tmp.V1
		default:
			return fmt.Errorf("unknown enum index: %v", tmp.Enum)
		}
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return err
	}
	// Deserialize `MerkleTree`:
	err = decoder.Decode(&obj.MerkleTree)
	if err != nil {
		return err
	}
	return nil
}
