// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bubblegum

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// DecompressV1 is the `decompressV1` instruction.
type DecompressV1 struct {
	Metadata *MetadataArgs

	// [0] = [WRITE] voucher
	//
	// [1] = [WRITE, SIGNER] leafOwner
	//
	// [2] = [WRITE] tokenAccount
	//
	// [3] = [WRITE] mint
	//
	// [4] = [WRITE] mintAuthority
	//
	// [5] = [WRITE] metadata
	//
	// [6] = [WRITE] masterEdition
	//
	// [7] = [] systemProgram
	//
	// [8] = [] sysvarRent
	//
	// [9] = [] tokenMetadataProgram
	//
	// [10] = [] tokenProgram
	//
	// [11] = [] associatedTokenProgram
	//
	// [12] = [] logWrapper
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewDecompressV1InstructionBuilder creates a new `DecompressV1` instruction builder.
func NewDecompressV1InstructionBuilder() *DecompressV1 {
	nd := &DecompressV1{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 13),
	}
	return nd
}

// SetMetadata sets the "metadata" parameter.
func (inst *DecompressV1) SetMetadata(metadata MetadataArgs) *DecompressV1 {
	inst.Metadata = &metadata
	return inst
}

// SetVoucherAccount sets the "voucher" account.
func (inst *DecompressV1) SetVoucherAccount(voucher ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(voucher).WRITE()
	return inst
}

// GetVoucherAccount gets the "voucher" account.
func (inst *DecompressV1) GetVoucherAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLeafOwnerAccount sets the "leafOwner" account.
func (inst *DecompressV1) SetLeafOwnerAccount(leafOwner ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(leafOwner).WRITE().SIGNER()
	return inst
}

// GetLeafOwnerAccount gets the "leafOwner" account.
func (inst *DecompressV1) GetLeafOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetTokenAccountAccount sets the "tokenAccount" account.
func (inst *DecompressV1) SetTokenAccountAccount(tokenAccount ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(tokenAccount).WRITE()
	return inst
}

// GetTokenAccountAccount gets the "tokenAccount" account.
func (inst *DecompressV1) GetTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMintAccount sets the "mint" account.
func (inst *DecompressV1) SetMintAccount(mint ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(mint).WRITE()
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *DecompressV1) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetMintAuthorityAccount sets the "mintAuthority" account.
func (inst *DecompressV1) SetMintAuthorityAccount(mintAuthority ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(mintAuthority).WRITE()
	return inst
}

// GetMintAuthorityAccount gets the "mintAuthority" account.
func (inst *DecompressV1) GetMintAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetMetadataAccount sets the "metadata" account.
func (inst *DecompressV1) SetMetadataAccount(metadata ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(metadata).WRITE()
	return inst
}

// GetMetadataAccount gets the "metadata" account.
func (inst *DecompressV1) GetMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetMasterEditionAccount sets the "masterEdition" account.
func (inst *DecompressV1) SetMasterEditionAccount(masterEdition ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(masterEdition).WRITE()
	return inst
}

// GetMasterEditionAccount gets the "masterEdition" account.
func (inst *DecompressV1) GetMasterEditionAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *DecompressV1) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *DecompressV1) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetSysvarRentAccount sets the "sysvarRent" account.
func (inst *DecompressV1) SetSysvarRentAccount(sysvarRent ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(sysvarRent)
	return inst
}

// GetSysvarRentAccount gets the "sysvarRent" account.
func (inst *DecompressV1) GetSysvarRentAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *DecompressV1) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *DecompressV1) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *DecompressV1) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *DecompressV1) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *DecompressV1) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *DecompressV1) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetLogWrapperAccount sets the "logWrapper" account.
func (inst *DecompressV1) SetLogWrapperAccount(logWrapper ag_solanago.PublicKey) *DecompressV1 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(logWrapper)
	return inst
}

// GetLogWrapperAccount gets the "logWrapper" account.
func (inst *DecompressV1) GetLogWrapperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

func (inst DecompressV1) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_DecompressV1,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst DecompressV1) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *DecompressV1) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Metadata == nil {
			return errors.New("Metadata parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Voucher is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LeafOwner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.TokenAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.MintAuthority is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.Metadata is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.MasterEdition is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.SysvarRent is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.LogWrapper is not set")
		}
	}
	return nil
}

func (inst *DecompressV1) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("DecompressV1")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Metadata", *inst.Metadata))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=13]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               voucher", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("             leafOwner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                 token", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("         mintAuthority", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("              metadata", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         masterEdition", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("            sysvarRent", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("  tokenMetadataProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("            logWrapper", inst.AccountMetaSlice.Get(12)))
					})
				})
		})
}

func (obj DecompressV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}
func (obj *DecompressV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}

// NewDecompressV1Instruction declares a new DecompressV1 instruction with the provided parameters and accounts.
func NewDecompressV1Instruction(
	// Parameters:
	metadata MetadataArgs,
	// Accounts:
	voucher ag_solanago.PublicKey,
	leafOwner ag_solanago.PublicKey,
	tokenAccount ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	mintAuthority ag_solanago.PublicKey,
	metadataAccount ag_solanago.PublicKey,
	masterEdition ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey,
	sysvarRent ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	logWrapper ag_solanago.PublicKey) *DecompressV1 {
	return NewDecompressV1InstructionBuilder().
		SetMetadata(metadata).
		SetVoucherAccount(voucher).
		SetLeafOwnerAccount(leafOwner).
		SetTokenAccountAccount(tokenAccount).
		SetMintAccount(mint).
		SetMintAuthorityAccount(mintAuthority).
		SetMetadataAccount(metadataAccount).
		SetMasterEditionAccount(masterEdition).
		SetSystemProgramAccount(systemProgram).
		SetSysvarRentAccount(sysvarRent).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetLogWrapperAccount(logWrapper)
}
