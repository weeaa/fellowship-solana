// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bubblegum

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// MintToCollectionV1 is the `mintToCollectionV1` instruction.
type MintToCollectionV1 struct {
	MetadataArgs *MetadataArgs

	// [0] = [WRITE] treeAuthority
	//
	// [1] = [] leafOwner
	//
	// [2] = [] leafDelegate
	//
	// [3] = [WRITE] merkleTree
	//
	// [4] = [SIGNER] payer
	//
	// [5] = [SIGNER] treeDelegate
	//
	// [6] = [SIGNER] collectionAuthority
	//
	// [7] = [] collectionAuthorityRecordPda
	//
	// [8] = [] collectionMint
	//
	// [9] = [WRITE] collectionMetadata
	//
	// [10] = [] editionAccount
	//
	// [11] = [] bubblegumSigner
	//
	// [12] = [] logWrapper
	//
	// [13] = [] compressionProgram
	//
	// [14] = [] tokenMetadataProgram
	//
	// [15] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewMintToCollectionV1InstructionBuilder creates a new `MintToCollectionV1` instruction builder.
func NewMintToCollectionV1InstructionBuilder() *MintToCollectionV1 {
	nd := &MintToCollectionV1{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 16),
	}
	return nd
}

// SetMetadataArgs sets the "metadataArgs" parameter.
func (inst *MintToCollectionV1) SetMetadataArgs(metadataArgs MetadataArgs) *MintToCollectionV1 {
	inst.MetadataArgs = &metadataArgs
	return inst
}

// SetTreeAuthorityAccount sets the "treeAuthority" account.
func (inst *MintToCollectionV1) SetTreeAuthorityAccount(treeAuthority ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treeAuthority).WRITE()
	return inst
}

// GetTreeAuthorityAccount gets the "treeAuthority" account.
func (inst *MintToCollectionV1) GetTreeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetLeafOwnerAccount sets the "leafOwner" account.
func (inst *MintToCollectionV1) SetLeafOwnerAccount(leafOwner ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(leafOwner)
	return inst
}

// GetLeafOwnerAccount gets the "leafOwner" account.
func (inst *MintToCollectionV1) GetLeafOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetLeafDelegateAccount sets the "leafDelegate" account.
func (inst *MintToCollectionV1) SetLeafDelegateAccount(leafDelegate ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(leafDelegate)
	return inst
}

// GetLeafDelegateAccount gets the "leafDelegate" account.
func (inst *MintToCollectionV1) GetLeafDelegateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetMerkleTreeAccount sets the "merkleTree" account.
func (inst *MintToCollectionV1) SetMerkleTreeAccount(merkleTree ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(merkleTree).WRITE()
	return inst
}

// GetMerkleTreeAccount gets the "merkleTree" account.
func (inst *MintToCollectionV1) GetMerkleTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetPayerAccount sets the "payer" account.
func (inst *MintToCollectionV1) SetPayerAccount(payer ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(payer).SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *MintToCollectionV1) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetTreeDelegateAccount sets the "treeDelegate" account.
func (inst *MintToCollectionV1) SetTreeDelegateAccount(treeDelegate ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(treeDelegate).SIGNER()
	return inst
}

// GetTreeDelegateAccount gets the "treeDelegate" account.
func (inst *MintToCollectionV1) GetTreeDelegateAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetCollectionAuthorityAccount sets the "collectionAuthority" account.
func (inst *MintToCollectionV1) SetCollectionAuthorityAccount(collectionAuthority ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(collectionAuthority).SIGNER()
	return inst
}

// GetCollectionAuthorityAccount gets the "collectionAuthority" account.
func (inst *MintToCollectionV1) GetCollectionAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetCollectionAuthorityRecordPdaAccount sets the "collectionAuthorityRecordPda" account.
func (inst *MintToCollectionV1) SetCollectionAuthorityRecordPdaAccount(collectionAuthorityRecordPda ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(collectionAuthorityRecordPda)
	return inst
}

// GetCollectionAuthorityRecordPdaAccount gets the "collectionAuthorityRecordPda" account.
func (inst *MintToCollectionV1) GetCollectionAuthorityRecordPdaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetCollectionMintAccount sets the "collectionMint" account.
func (inst *MintToCollectionV1) SetCollectionMintAccount(collectionMint ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(collectionMint)
	return inst
}

// GetCollectionMintAccount gets the "collectionMint" account.
func (inst *MintToCollectionV1) GetCollectionMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetCollectionMetadataAccount sets the "collectionMetadata" account.
func (inst *MintToCollectionV1) SetCollectionMetadataAccount(collectionMetadata ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(collectionMetadata).WRITE()
	return inst
}

// GetCollectionMetadataAccount gets the "collectionMetadata" account.
func (inst *MintToCollectionV1) GetCollectionMetadataAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetEditionAccountAccount sets the "editionAccount" account.
func (inst *MintToCollectionV1) SetEditionAccountAccount(editionAccount ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(editionAccount)
	return inst
}

// GetEditionAccountAccount gets the "editionAccount" account.
func (inst *MintToCollectionV1) GetEditionAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetBubblegumSignerAccount sets the "bubblegumSigner" account.
func (inst *MintToCollectionV1) SetBubblegumSignerAccount(bubblegumSigner ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(bubblegumSigner)
	return inst
}

// GetBubblegumSignerAccount gets the "bubblegumSigner" account.
func (inst *MintToCollectionV1) GetBubblegumSignerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

// SetLogWrapperAccount sets the "logWrapper" account.
func (inst *MintToCollectionV1) SetLogWrapperAccount(logWrapper ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[12] = ag_solanago.Meta(logWrapper)
	return inst
}

// GetLogWrapperAccount gets the "logWrapper" account.
func (inst *MintToCollectionV1) GetLogWrapperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(12)
}

// SetCompressionProgramAccount sets the "compressionProgram" account.
func (inst *MintToCollectionV1) SetCompressionProgramAccount(compressionProgram ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[13] = ag_solanago.Meta(compressionProgram)
	return inst
}

// GetCompressionProgramAccount gets the "compressionProgram" account.
func (inst *MintToCollectionV1) GetCompressionProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(13)
}

// SetTokenMetadataProgramAccount sets the "tokenMetadataProgram" account.
func (inst *MintToCollectionV1) SetTokenMetadataProgramAccount(tokenMetadataProgram ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[14] = ag_solanago.Meta(tokenMetadataProgram)
	return inst
}

// GetTokenMetadataProgramAccount gets the "tokenMetadataProgram" account.
func (inst *MintToCollectionV1) GetTokenMetadataProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(14)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *MintToCollectionV1) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *MintToCollectionV1 {
	inst.AccountMetaSlice[15] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *MintToCollectionV1) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(15)
}

func (inst MintToCollectionV1) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_MintToCollectionV1,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst MintToCollectionV1) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *MintToCollectionV1) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MetadataArgs == nil {
			return errors.New("MetadataArgs parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreeAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.LeafOwner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.LeafDelegate is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.MerkleTree is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.TreeDelegate is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.CollectionAuthority is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.CollectionAuthorityRecordPda is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.CollectionMint is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.CollectionMetadata is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.EditionAccount is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.BubblegumSigner is not set")
		}
		if inst.AccountMetaSlice[12] == nil {
			return errors.New("accounts.LogWrapper is not set")
		}
		if inst.AccountMetaSlice[13] == nil {
			return errors.New("accounts.CompressionProgram is not set")
		}
		if inst.AccountMetaSlice[14] == nil {
			return errors.New("accounts.TokenMetadataProgram is not set")
		}
		if inst.AccountMetaSlice[15] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *MintToCollectionV1) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("MintToCollectionV1")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("MetadataArgs", *inst.MetadataArgs))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=16]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               treeAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                   leafOwner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                leafDelegate", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                  merkleTree", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("                       payer", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                treeDelegate", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("         collectionAuthority", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("collectionAuthorityRecordPda", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("              collectionMint", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("          collectionMetadata", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                     edition", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("             bubblegumSigner", inst.AccountMetaSlice.Get(11)))
						accountsBranch.Child(ag_format.Meta("                  logWrapper", inst.AccountMetaSlice.Get(12)))
						accountsBranch.Child(ag_format.Meta("          compressionProgram", inst.AccountMetaSlice.Get(13)))
						accountsBranch.Child(ag_format.Meta("        tokenMetadataProgram", inst.AccountMetaSlice.Get(14)))
						accountsBranch.Child(ag_format.Meta("               systemProgram", inst.AccountMetaSlice.Get(15)))
					})
				})
		})
}

func (obj MintToCollectionV1) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MetadataArgs` param:
	err = encoder.Encode(obj.MetadataArgs)
	if err != nil {
		return err
	}
	return nil
}
func (obj *MintToCollectionV1) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MetadataArgs`:
	err = decoder.Decode(&obj.MetadataArgs)
	if err != nil {
		return err
	}
	return nil
}

// NewMintToCollectionV1Instruction declares a new MintToCollectionV1 instruction with the provided parameters and accounts.
func NewMintToCollectionV1Instruction(
	// Parameters:
	metadataArgs MetadataArgs,
	// Accounts:
	treeAuthority ag_solanago.PublicKey,
	leafOwner ag_solanago.PublicKey,
	leafDelegate ag_solanago.PublicKey,
	merkleTree ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	treeDelegate ag_solanago.PublicKey,
	collectionAuthority ag_solanago.PublicKey,
	collectionAuthorityRecordPda ag_solanago.PublicKey,
	collectionMint ag_solanago.PublicKey,
	collectionMetadata ag_solanago.PublicKey,
	editionAccount ag_solanago.PublicKey,
	bubblegumSigner ag_solanago.PublicKey,
	logWrapper ag_solanago.PublicKey,
	compressionProgram ag_solanago.PublicKey,
	tokenMetadataProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *MintToCollectionV1 {
	return NewMintToCollectionV1InstructionBuilder().
		SetMetadataArgs(metadataArgs).
		SetTreeAuthorityAccount(treeAuthority).
		SetLeafOwnerAccount(leafOwner).
		SetLeafDelegateAccount(leafDelegate).
		SetMerkleTreeAccount(merkleTree).
		SetPayerAccount(payer).
		SetTreeDelegateAccount(treeDelegate).
		SetCollectionAuthorityAccount(collectionAuthority).
		SetCollectionAuthorityRecordPdaAccount(collectionAuthorityRecordPda).
		SetCollectionMintAccount(collectionMint).
		SetCollectionMetadataAccount(collectionMetadata).
		SetEditionAccountAccount(editionAccount).
		SetBubblegumSignerAccount(bubblegumSigner).
		SetLogWrapperAccount(logWrapper).
		SetCompressionProgramAccount(compressionProgram).
		SetTokenMetadataProgramAccount(tokenMetadataProgram).
		SetSystemProgramAccount(systemProgram)
}
