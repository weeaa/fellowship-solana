// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package bubblegum

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateTree is the `createTree` instruction.
type CreateTree struct {
	MaxDepth      *uint32
	MaxBufferSize *uint32
	Public        *bool `bin:"optional"`

	// [0] = [WRITE] treeAuthority
	//
	// [1] = [WRITE] merkleTree
	//
	// [2] = [WRITE, SIGNER] payer
	//
	// [3] = [SIGNER] treeCreator
	//
	// [4] = [] logWrapper
	//
	// [5] = [] compressionProgram
	//
	// [6] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateTreeInstructionBuilder creates a new `CreateTree` instruction builder.
func NewCreateTreeInstructionBuilder() *CreateTree {
	nd := &CreateTree{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 7),
	}
	return nd
}

// SetMaxDepth sets the "maxDepth" parameter.
func (inst *CreateTree) SetMaxDepth(maxDepth uint32) *CreateTree {
	inst.MaxDepth = &maxDepth
	return inst
}

// SetMaxBufferSize sets the "maxBufferSize" parameter.
func (inst *CreateTree) SetMaxBufferSize(maxBufferSize uint32) *CreateTree {
	inst.MaxBufferSize = &maxBufferSize
	return inst
}

// SetPublic sets the "public" parameter.
func (inst *CreateTree) SetPublic(public bool) *CreateTree {
	inst.Public = &public
	return inst
}

// SetTreeAuthorityAccount sets the "treeAuthority" account.
func (inst *CreateTree) SetTreeAuthorityAccount(treeAuthority ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(treeAuthority).WRITE()
	return inst
}

// GetTreeAuthorityAccount gets the "treeAuthority" account.
func (inst *CreateTree) GetTreeAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetMerkleTreeAccount sets the "merkleTree" account.
func (inst *CreateTree) SetMerkleTreeAccount(merkleTree ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(merkleTree).WRITE()
	return inst
}

// GetMerkleTreeAccount gets the "merkleTree" account.
func (inst *CreateTree) GetMerkleTreeAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetPayerAccount sets the "payer" account.
func (inst *CreateTree) SetPayerAccount(payer ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(payer).WRITE().SIGNER()
	return inst
}

// GetPayerAccount gets the "payer" account.
func (inst *CreateTree) GetPayerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetTreeCreatorAccount sets the "treeCreator" account.
func (inst *CreateTree) SetTreeCreatorAccount(treeCreator ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(treeCreator).SIGNER()
	return inst
}

// GetTreeCreatorAccount gets the "treeCreator" account.
func (inst *CreateTree) GetTreeCreatorAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetLogWrapperAccount sets the "logWrapper" account.
func (inst *CreateTree) SetLogWrapperAccount(logWrapper ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(logWrapper)
	return inst
}

// GetLogWrapperAccount gets the "logWrapper" account.
func (inst *CreateTree) GetLogWrapperAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetCompressionProgramAccount sets the "compressionProgram" account.
func (inst *CreateTree) SetCompressionProgramAccount(compressionProgram ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(compressionProgram)
	return inst
}

// GetCompressionProgramAccount gets the "compressionProgram" account.
func (inst *CreateTree) GetCompressionProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateTree) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateTree {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateTree) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

func (inst CreateTree) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateTree,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateTree) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateTree) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.MaxDepth == nil {
			return errors.New("MaxDepth parameter is not set")
		}
		if inst.MaxBufferSize == nil {
			return errors.New("MaxBufferSize parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.TreeAuthority is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.MerkleTree is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.Payer is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.TreeCreator is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.LogWrapper is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.CompressionProgram is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateTree) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateTree")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=3]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("     MaxDepth", *inst.MaxDepth))
						paramsBranch.Child(ag_format.Param("MaxBufferSize", *inst.MaxBufferSize))
						paramsBranch.Child(ag_format.Param("       Public (OPT)", inst.Public))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=7]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("     treeAuthority", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("        merkleTree", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("             payer", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("       treeCreator", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("        logWrapper", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("compressionProgram", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("     systemProgram", inst.AccountMetaSlice.Get(6)))
					})
				})
		})
}

func (obj CreateTree) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `MaxDepth` param:
	err = encoder.Encode(obj.MaxDepth)
	if err != nil {
		return err
	}
	// Serialize `MaxBufferSize` param:
	err = encoder.Encode(obj.MaxBufferSize)
	if err != nil {
		return err
	}
	// Serialize `Public` param (optional):
	{
		if obj.Public == nil {
			err = encoder.WriteBool(false)
			if err != nil {
				return err
			}
		} else {
			err = encoder.WriteBool(true)
			if err != nil {
				return err
			}
			err = encoder.Encode(obj.Public)
			if err != nil {
				return err
			}
		}
	}
	return nil
}
func (obj *CreateTree) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `MaxDepth`:
	err = decoder.Decode(&obj.MaxDepth)
	if err != nil {
		return err
	}
	// Deserialize `MaxBufferSize`:
	err = decoder.Decode(&obj.MaxBufferSize)
	if err != nil {
		return err
	}
	// Deserialize `Public` (optional):
	{
		ok, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		if ok {
			err = decoder.Decode(&obj.Public)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// NewCreateTreeInstruction declares a new CreateTree instruction with the provided parameters and accounts.
func NewCreateTreeInstruction(
	// Parameters:
	maxDepth uint32,
	maxBufferSize uint32,
	public bool,
	// Accounts:
	treeAuthority ag_solanago.PublicKey,
	merkleTree ag_solanago.PublicKey,
	payer ag_solanago.PublicKey,
	treeCreator ag_solanago.PublicKey,
	logWrapper ag_solanago.PublicKey,
	compressionProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateTree {
	return NewCreateTreeInstructionBuilder().
		SetMaxDepth(maxDepth).
		SetMaxBufferSize(maxBufferSize).
		SetPublic(public).
		SetTreeAuthorityAccount(treeAuthority).
		SetMerkleTreeAccount(merkleTree).
		SetPayerAccount(payer).
		SetTreeCreatorAccount(treeCreator).
		SetLogWrapperAccount(logWrapper).
		SetCompressionProgramAccount(compressionProgram).
		SetSystemProgramAccount(systemProgram)
}
