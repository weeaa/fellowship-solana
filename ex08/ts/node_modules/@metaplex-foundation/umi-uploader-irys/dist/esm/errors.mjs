import { UmiError } from '@metaplex-foundation/umi';

class IrysError extends UmiError {
  name = 'IrysError';
  constructor(message, cause) {
    super(message, 'plugin', 'Irys', cause);
  }
}
class FailedToInitializeIrysError extends IrysError {
  name = 'FailedToInitializeIrysError';
  constructor(cause) {
    const message = 'Irys could not be initialized. ' + 'Please check the underlying error below for more details.';
    super(message, cause);
  }
}
class FailedToConnectToIrysAddressError extends IrysError {
  name = 'FailedToConnectToIrysAddressError';
  constructor(address, cause) {
    const message = `Irys could not connect to the provided address [${address}]. ` + 'Please ensure the provided address is valid. Some valid addresses include: ' + '"https://node1.irys.xyz" for mainnet and "https://devnet.irys.xyz" for devnet';
    super(message, cause);
  }
}
class AssetUploadFailedError extends IrysError {
  name = 'AssetUploadFailedError';
  constructor(status) {
    const message = `The asset could not be uploaded to the Irys network and ` + `returned the following status code [${status}].`;
    super(message);
  }
}
class IrysWithdrawError extends IrysError {
  name = 'IrysWithdrawError';
  constructor(error) {
    const message = `The balance could not be withdrawn from the Irys network and ` + `returned the following error: ${error}.`;
    super(message);
  }
}

export { AssetUploadFailedError, FailedToConnectToIrysAddressError, FailedToInitializeIrysError, IrysError, IrysWithdrawError };
//# sourceMappingURL=errors.mjs.map
