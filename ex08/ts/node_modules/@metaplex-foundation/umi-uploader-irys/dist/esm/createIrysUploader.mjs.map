{"version":3,"file":"createIrysUploader.mjs","sources":["../../src/createIrysUploader.ts"],"sourcesContent":["// eslint-disable-next-line import/no-named-default\nimport type { default as NodeIrys, WebIrys } from '@irys/sdk';\nimport {\n  Commitment,\n  Context,\n  GenericFile,\n  GenericFileTag,\n  Keypair,\n  Signer,\n  SolAmount,\n  UploaderInterface,\n  base58,\n  createGenericFileFromJson,\n  createSignerFromKeypair,\n  isKeypairSigner,\n  lamports,\n  publicKey,\n  signTransaction,\n} from '@metaplex-foundation/umi';\nimport {\n  fromWeb3JsKeypair,\n  fromWeb3JsLegacyTransaction,\n  toWeb3JsLegacyTransaction,\n  toWeb3JsPublicKey,\n} from '@metaplex-foundation/umi-web3js-adapters';\nimport {\n  Connection as Web3JsConnection,\n  Keypair as Web3JsKeypair,\n  PublicKey as Web3JsPublicKey,\n  SendOptions as Web3JsSendOptions,\n  Signer as Web3JsSigner,\n  Transaction as Web3JsTransaction,\n  TransactionSignature as Web3JsTransactionSignature,\n} from '@solana/web3.js';\nimport BigNumber from 'bignumber.js';\nimport { Buffer } from 'buffer';\nimport {\n  AssetUploadFailedError,\n  IrysWithdrawError,\n  FailedToConnectToIrysAddressError,\n  FailedToInitializeIrysError,\n} from './errors';\n\n/**\n * This method is necessary to import the Irys package on both ESM and CJS modules.\n * Without this, we get a different structure on each module:\n * - CJS: { default: [Getter], WebIrys: [Getter] }\n * - ESM: { default: { default: [Getter], WebIrys: [Getter] } }\n * This method fixes this by ensure there is not double default in the imported package.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _removeDoubleDefault<T>(pkg: T): T {\n  if (\n    pkg &&\n    typeof pkg === 'object' &&\n    'default' in pkg &&\n    'default' in (pkg as any).default\n  ) {\n    return (pkg as any).default;\n  }\n\n  return pkg;\n}\n\nexport type IrysUploader = UploaderInterface & {\n  irys: () => Promise<NodeIrys | WebIrys>;\n  getUploadPriceFromBytes: (bytes: number) => Promise<SolAmount>;\n  getBalance: () => Promise<SolAmount>;\n  fund: (amount: SolAmount, skipBalanceCheck: boolean) => Promise<void>;\n  withdrawAll: (amount: SolAmount) => Promise<void>;\n  withdraw: (amount: SolAmount) => Promise<void>;\n};\n\nexport type IrysUploaderOptions = {\n  address?: string;\n  timeout?: number;\n  providerUrl?: string;\n  priceMultiplier?: number;\n  payer?: Signer;\n};\n\nexport type IrysWalletAdapter = {\n  publicKey: Web3JsPublicKey | null;\n  signMessage?: (message: Uint8Array) => Promise<Uint8Array>;\n  signTransaction?: (\n    transaction: Web3JsTransaction\n  ) => Promise<Web3JsTransaction>;\n  signAllTransactions?: (\n    transactions: Web3JsTransaction[]\n  ) => Promise<Web3JsTransaction[]>;\n  sendTransaction: (\n    transaction: Web3JsTransaction,\n    connection: Web3JsConnection,\n    options?: Web3JsSendOptions & { signers?: Web3JsSigner[] }\n  ) => Promise<Web3JsTransactionSignature>;\n};\n\n// Size of Irys transaction header.\nconst HEADER_SIZE = 2_000;\n\n// Minimum file size for cost calculation.\nconst MINIMUM_SIZE = 80_000;\n\nexport function createIrysUploader(\n  context: Pick<Context, 'rpc' | 'payer' | 'eddsa'>,\n  options: IrysUploaderOptions = {}\n): IrysUploader {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  let _irys: WebIrys | NodeIrys | null = null;\n  options = {\n    providerUrl: context.rpc.getEndpoint(),\n    ...options,\n  };\n\n  const getUploadPriceFromBytes = async (bytes: number): Promise<SolAmount> => {\n    const irys = await getIrys();\n    const price = await irys.getPrice(bytes);\n\n    return bigNumberToAmount(\n      price.multipliedBy(options.priceMultiplier ?? 1.1)\n    );\n  };\n\n  const getUploadPrice = async (files: GenericFile[]): Promise<SolAmount> => {\n    const bytes: number = files.reduce(\n      (sum, file) =>\n        sum + HEADER_SIZE + Math.max(MINIMUM_SIZE, file.buffer.byteLength),\n      0\n    );\n\n    return getUploadPriceFromBytes(bytes);\n  };\n\n  const upload = async (files: GenericFile[]): Promise<string[]> => {\n    const irys = await getIrys();\n    const amount = await getUploadPrice(files);\n    await fund(amount);\n\n    const promises = files.map(async (file) => {\n      const buffer = Buffer.from(file.buffer);\n      const irysTx = irys.createTransaction(buffer, {\n        tags: getGenericFileTagsWithContentType(file),\n      });\n      await irysTx.sign();\n\n      const { status, data } = await irys.uploader.uploadTransaction(irysTx);\n\n      if (status >= 300) {\n        throw new AssetUploadFailedError(status);\n      }\n\n      return `https://arweave.net/${data.id}`;\n    });\n\n    return Promise.all(promises);\n  };\n\n  const uploadJson = async <T>(json: T): Promise<string> => {\n    const file = createGenericFileFromJson(json);\n    const uris = await upload([file]);\n    return uris[0];\n  };\n\n  const getBalance = async (): Promise<SolAmount> => {\n    const irys = await getIrys();\n    const balance = await irys.getLoadedBalance();\n\n    return bigNumberToAmount(balance);\n  };\n\n  const fund = async (\n    amount: SolAmount,\n    skipBalanceCheck = false\n  ): Promise<void> => {\n    const irys = await getIrys();\n    let toFund = amountToBigNumber(amount);\n\n    if (!skipBalanceCheck) {\n      const balance = await irys.getLoadedBalance();\n\n      toFund = toFund.isGreaterThan(balance)\n        ? toFund.minus(balance)\n        : new BigNumber(0);\n    }\n\n    if (toFund.isLessThanOrEqualTo(0)) {\n      return;\n    }\n\n    await irys.fund(toFund);\n  };\n\n  const withdrawAll = async (): Promise<void> => {\n    // TODO(loris): Replace with \"withdrawAll\" when available on Irys.\n    const irys = await getIrys();\n    const balance = await irys.getLoadedBalance();\n    const minimumBalance = new BigNumber(5000);\n\n    if (balance.isLessThan(minimumBalance)) {\n      return;\n    }\n\n    const balanceToWithdraw = balance.minus(minimumBalance);\n    await withdraw(bigNumberToAmount(balanceToWithdraw));\n  };\n\n  const withdraw = async (amount: SolAmount): Promise<void> => {\n    const irys = await getIrys();\n    try {\n      await irys.withdrawBalance(amountToBigNumber(amount));\n    } catch (e: any) {\n      throw new IrysWithdrawError(\n        e instanceof Error ? e.message : e.toString()\n      );\n    }\n  };\n\n  const getIrys = async (): Promise<WebIrys | NodeIrys> => {\n    const oldPayer = _irys?.getSigner().publicKey;\n    const newPayer = options.payer ?? context.payer;\n    if (\n      oldPayer &&\n      publicKey(new Uint8Array(oldPayer)) !== newPayer.publicKey\n    ) {\n      _irys = null;\n    }\n\n    if (!_irys) {\n      _irys = await initIrys();\n    }\n\n    return _irys;\n  };\n\n  const initIrys = async (): Promise<WebIrys | NodeIrys> => {\n    const currency = 'solana';\n    const defaultAddress =\n      context.rpc.getCluster() === 'devnet'\n        ? 'https://devnet.irys.xyz'\n        : 'https://node1.irys.xyz';\n    const address = options?.address ?? defaultAddress;\n    const irysOptions = {\n      timeout: options.timeout,\n      providerUrl: options.providerUrl,\n    };\n\n    const payer: Signer = options.payer ?? context.payer;\n\n    // If in node use node irys, else use web irys.\n    const isNode =\n      // eslint-disable-next-line no-prototype-builtins\n      typeof window === 'undefined' || window.process?.hasOwnProperty('type');\n\n    let irys;\n    if (isNode && isKeypairSigner(payer))\n      irys = await initNodeIrys(address, currency, payer, irysOptions);\n    else {\n      irys = await initWebIrys(address, currency, payer, irysOptions);\n    }\n\n    try {\n      // Check for valid irys node.\n      await irys.utils.getBundlerAddress(currency);\n    } catch (error) {\n      throw new FailedToConnectToIrysAddressError(address, error as Error);\n    }\n\n    return irys;\n  };\n\n  const initNodeIrys = async (\n    address: string,\n    currency: string,\n    keypair: Keypair,\n    options: any\n  ): Promise<NodeIrys> => {\n    const bPackage = _removeDoubleDefault(await import('@irys/sdk'));\n    // eslint-disable-next-line new-cap\n    return new bPackage.default({\n      url: address,\n      token: currency,\n      key: keypair.secretKey,\n      config: options,\n    });\n  };\n\n  const initWebIrys = async (\n    address: string,\n    currency: string,\n    payer: Signer,\n    options: any\n  ): Promise<WebIrys> => {\n    const wallet: IrysWalletAdapter = {\n      publicKey: toWeb3JsPublicKey(payer.publicKey),\n      signMessage: (message: Uint8Array) => payer.signMessage(message),\n      signTransaction: async (web3JsTransaction: Web3JsTransaction) =>\n        toWeb3JsLegacyTransaction(\n          await payer.signTransaction(\n            fromWeb3JsLegacyTransaction(web3JsTransaction)\n          )\n        ),\n      signAllTransactions: async (web3JsTransactions: Web3JsTransaction[]) => {\n        const transactions = web3JsTransactions.map(\n          fromWeb3JsLegacyTransaction\n        );\n        const signedTransactions = await payer.signAllTransactions(\n          transactions\n        );\n        return signedTransactions.map(toWeb3JsLegacyTransaction);\n      },\n      sendTransaction: async (\n        web3JsTransaction: Web3JsTransaction,\n        connection: Web3JsConnection,\n        options: Web3JsSendOptions & { signers?: Web3JsSigner[] } = {}\n      ): Promise<Web3JsTransactionSignature> => {\n        const { signers: web3JsSigners = [], ...sendOptions } = options;\n        const signers = web3JsSigners.map((web3JsSigner) =>\n          createSignerFromKeypair(\n            context,\n            fromWeb3JsKeypair(\n              Web3JsKeypair.fromSecretKey(web3JsSigner.secretKey)\n            )\n          )\n        );\n\n        let transaction = fromWeb3JsLegacyTransaction(web3JsTransaction);\n        transaction = await signTransaction(transaction, [payer, ...signers]);\n\n        const signature = await context.rpc.sendTransaction(transaction, {\n          ...sendOptions,\n          preflightCommitment: sendOptions.preflightCommitment as Commitment,\n        });\n\n        return base58.deserialize(signature)[0];\n      },\n    };\n\n    const bPackage = _removeDoubleDefault(await import('@irys/sdk'));\n    const irys = new bPackage.WebIrys({\n      url: address,\n      token: currency,\n      wallet: { provider: wallet },\n      config: options,\n    });\n\n    try {\n      // Try to initiate irys.\n      await irys.ready();\n    } catch (error) {\n      throw new FailedToInitializeIrysError(error as Error);\n    }\n\n    return irys;\n  };\n\n  return {\n    getUploadPriceFromBytes,\n    getUploadPrice,\n    upload,\n    uploadJson,\n    getBalance,\n    fund,\n    withdrawAll,\n    withdraw,\n    irys: getIrys,\n  };\n}\n\nexport const isIrysUploader = (\n  uploader: UploaderInterface\n): uploader is IrysUploader =>\n  'irys' in uploader &&\n  'getBalance' in uploader &&\n  'fund' in uploader &&\n  'withdrawAll' in uploader;\n\nconst bigNumberToAmount = (bigNumber: BigNumber): SolAmount =>\n  lamports(bigNumber.decimalPlaces(0).toString());\n\nconst amountToBigNumber = (amount: SolAmount): BigNumber =>\n  new BigNumber(amount.basisPoints.toString());\n\nconst getGenericFileTagsWithContentType = (\n  file: GenericFile\n): GenericFileTag[] => {\n  if (!file.contentType) {\n    return file.tags;\n  }\n\n  return [{ name: 'Content-Type', value: file.contentType }, ...file.tags];\n};\n"],"names":["_removeDoubleDefault","pkg","default","HEADER_SIZE","MINIMUM_SIZE","createIrysUploader","context","options","_irys","providerUrl","rpc","getEndpoint","getUploadPriceFromBytes","bytes","irys","getIrys","price","getPrice","bigNumberToAmount","multipliedBy","priceMultiplier","getUploadPrice","files","reduce","sum","file","Math","max","buffer","byteLength","upload","amount","fund","promises","map","Buffer","from","irysTx","createTransaction","tags","getGenericFileTagsWithContentType","sign","status","data","uploader","uploadTransaction","AssetUploadFailedError","id","Promise","all","uploadJson","json","createGenericFileFromJson","uris","getBalance","balance","getLoadedBalance","skipBalanceCheck","toFund","amountToBigNumber","isGreaterThan","minus","BigNumber","isLessThanOrEqualTo","withdrawAll","minimumBalance","isLessThan","balanceToWithdraw","withdraw","withdrawBalance","e","IrysWithdrawError","Error","message","toString","oldPayer","getSigner","publicKey","newPayer","payer","Uint8Array","initIrys","currency","defaultAddress","getCluster","address","irysOptions","timeout","isNode","window","process","hasOwnProperty","isKeypairSigner","initNodeIrys","initWebIrys","utils","getBundlerAddress","error","FailedToConnectToIrysAddressError","keypair","bPackage","url","token","key","secretKey","config","wallet","toWeb3JsPublicKey","signMessage","signTransaction","web3JsTransaction","toWeb3JsLegacyTransaction","fromWeb3JsLegacyTransaction","signAllTransactions","web3JsTransactions","transactions","signedTransactions","sendTransaction","connection","signers","web3JsSigners","sendOptions","web3JsSigner","createSignerFromKeypair","fromWeb3JsKeypair","Web3JsKeypair","fromSecretKey","transaction","signature","preflightCommitment","base58","deserialize","WebIrys","provider","ready","FailedToInitializeIrysError","isIrysUploader","bigNumber","lamports","decimalPlaces","basisPoints","contentType","name","value"],"mappings":"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"}