import { MoveStructId } from '../types/index.mjs';
import './apiEndpoints.mjs';
import '../types/indexer.mjs';
import '../types/generated/operations.mjs';
import '../types/generated/types.mjs';

/**
 * Sleep the current thread for the given amount of time
 * @param timeMs time in milliseconds to sleep
 */
declare function sleep(timeMs: number): Promise<null>;
declare const nowInSeconds: () => number;
declare function floorToWholeHour(timestampInSeconds: number): number;
declare function base64UrlDecode(base64Url: string): string;
/**
 * Amount is represented in the smallest unit format on chain, this function converts
 * a human readable amount format to the smallest unit format
 * @example
 * human readable amount format: 500
 * on chain amount format when decimal is 8: 50000000000
 *
 * @param value The value in human readable format
 * @param decimal The token decimal
 * @returns The value is smallest units
 */
declare const convertAmountFromHumanReadableToOnChain: (value: number, decimal: number) => number;
/**
 * Amount is represented in the smallest unit format on chain, this function converts
 * the smallest unit format to a human readable amount format
 * @example
 * human readable amount format: 500
 * on chain amount format when decimal is 8: 50000000000
 *
 * @param value The value in human readable format
 * @param decimal The token decimal
 * @returns The value is smallest units
 */
declare const convertAmountFromOnChainToHumanReadable: (value: number, decimal: number) => number;
/**
 * Convert an encoded struct to a MoveStructId.
 *
 * @example
 * const structObj = {
 *   account_address: "0x1",
 *   module_name: "0x6170746f735f636f696e",
 *   struct_name: "0x4170746f73436f696e",
 * };
 * // structId is "0x1::aptos_coin::AptosCoin"
 * const structId = parseEncodedStruct(structObj);
 *
 * @param structObj The struct with account_address, module_name, and struct_name properties
 * @returns The MoveStructId
 */
declare const parseEncodedStruct: (structObj: {
    account_address: string;
    module_name: string;
    struct_name: string;
}) => MoveStructId;
/**
 * Determines whether the given object is an encoded struct type with the following properties:
 * - account_address: string
 * - module_name: string
 * - struct_name: string
 *
 * @param structObj The object to check
 * @returns Whether the object is an encoded struct type
 */
declare const isEncodedStruct: (structObj: any) => structObj is {
    account_address: string;
    module_name: string;
    struct_name: string;
};

export { base64UrlDecode, convertAmountFromHumanReadableToOnChain, convertAmountFromOnChainToHumanReadable, floorToWholeHour, isEncodedStruct, nowInSeconds, parseEncodedStruct, sleep };
